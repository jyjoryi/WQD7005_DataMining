NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


18958      %let em_Train = Y;
18959      %let em_Report = Y;
18960      %let em_Score = Y;
18961      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
18963     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
18964     +  %global &nLevel;
18965     +  proc dmdb batch data=&indata
18966     +    classout=_tmp_dmdbout;
18967     +    class &target;
18968     +  run;
18969     +  data _tmp_dmdbout;
18970     +    set _tmp_dmdbout;
18971     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
18972     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
18973     +  run;
18974     +  data _null_;
18975     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
18976     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
18977     +    %let dsid = %sysfunc(close(&dsid));
18978     +     call symput("&nLevel", put(&_obs, Best12.));
18979     +  run;
18981     +  proc datasets lib=work nolist;
18982     +     delete _tmp_dmdbout;
18983     +  run;
18984     +  quit;
18985     +%Mend EM_CheckBinaryTargetLevel;
18988     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
18990     +  /* determine the number of obs in training data */
18991     +  proc sql;
18992     +    reset noprint;
18993     +    select count(*) into :em_nobs from &indata;
18994     +  quit;
18996     +  /* determine the number of input variables */
18997     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
18998     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
19000     +  /* retrieve targetEvent from decmeta */
19001     +  %let targetEvent=;
19002     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19003     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
19004     +      data _null_;
19005     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
19006     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19007     +      run;
19008     +    %end;
19009     +  %end;
19011     +  /* create targetTable if multipleTar eq Y */
19012     +  data temptarget;
19013     +    set &EM_DATA_VARIABLESET;
19014     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
19015     +  run;
19017     + /* data sets */
19018     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
19019     + %EM_GETNAME(key=EMTREE,        type=DATA);
19020     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
19021     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
19022     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
19023     + %EM_GETNAME(key=OUTNODES,      type=DATA);
19024     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
19025     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
19026     + %EM_GETNAME(key=OUTPATH,       type=DATA);
19027     + %EM_GETNAME(key=OUTRULES,      type=DATA);
19029     + /* files */
19030     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
19031     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
19033     + /* turn on pmml if requested */
19034     + %let nnpmml=0;
19035     + %if %symexist(EM_PMML) %then %do;
19036     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
19037     +       %let nnpmml=1;
19039     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
19040     +%end;
19042     + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
19044     + %if &nnpmml or &numClassTarget %then %do;
19046     +       /* create dmdb needed for pmml generation */
19047     +       %let tree_maxlevel = 512;
19048     +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
19049     +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
19050     +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
19051     +         %end;
19052     +       %end;
19053     +       %if &tree_maxlevel gt 0 %then %do;
19054     +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
19055     +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
19056     +       %end;
19058     +       %let targetOrderString =;
19059     +       %let targetString = ;
19060     +       data _null_;
19061     +          length orderString nameString $10000;
19062     +          retain orderString nameString;
19063     +          set &em_data_variableset end=eof;
19064     +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
19065     +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
19066     +          %end;
19067     +          %else %do;
19068     +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
19069     +          %end;          select(order);
19070     +            when('')        order ='DESC';
19071     +            when('FMTASC')  order='ASCFMT';
19072     +            when('FMTDESC') order='DESFMT';
19073     +            otherwise;
19074     +          end;
19075     +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
19076     +          nameString = trim(nameString)!!' '!!trim(NAME);
19078     +          if eof then do;
19079     +             call symput('targetOrderString', trim(orderString));
19080     +             call symput('targetString', trim(nameString));
19081     +          end;
19082     +       run;
19084     +       %let arborkluge= "work._treeDMDB";
19086     +       proc dmdb batch data=&indata
19087     +       %if &nnpmml %then %do;
19088     +           PMML
19089     +       %end;
19090     +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
19093     +   %if &nnpmml %then %do;
19094     +        %if "%EM_ID" ne "" %then %do;
19095     +          id %EM_ID;
19096     +        %end;
19097     +        %if &EM_NUM_CLASS gt 0 %then %do;
19098     +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
19099     +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
19100     +               &targetOrderString;
19101     +        %end;
19102     +        %if &EM_NUM_INTERVAL gt 0 %then %do;
19103     +          var %EM_INTERVAL;
19104     +        %end;
19105     +        target &targetString %EM_INTERVAL_TARGET;
19106     +        %if "%EM_FREQ" ne "" %then %do;
19107     +          freq %EM_FREQ;
19108     +        %end;
19109     +  %end;
19110     +  %else %do;
19111     +      class  &targetOrderString;
19112     +      target &targetString %EM_INTERVAL_TARGET;
19113     +  %end;
19114     +       run;
19115     +       quit;
19117     +       proc datasets lib=work nolist;
19118     +          delete classout varout;
19119     +       run;
19120     +       quit;
19122     +    %end;
19123     + %end;
19125     + /* run Arbor procedure */
19126     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
19127     +  proc arbor data=&INDATA
19129     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
19130     +    Leafsize = &EM_PROPERTY_LEAFSIZE
19131     +  %end;
19133     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
19134     +    Splitsize = &EM_PROPERTY_SPLITSIZE
19135     +  %end;
19137     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
19138     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
19139     +  %end;
19141     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
19142     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
19143     +  %end;
19145     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
19146     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
19147     +  %end;
19149     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
19150     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
19151     +  %end;
19152     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
19153     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
19154     +  %end;
19155     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19156     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
19157     +  %end;
19159     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
19160     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
19161     +      alpha = &EM_PROPERTY_SIGLEVEL
19162     +    %end;
19163     +  %end;
19165     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
19166     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
19167     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
19168     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
19169     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
19171     +        padjust =
19172     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
19173     +          &chaid
19174     +        %end;
19175     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
19176     +          DEPTH
19177     +        %end;
19178     +      %end;
19179     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
19180     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
19181     +         pvars = &num_inputs
19182     +      %end;
19183     +    %end;
19184     +  %end;
19185     +  %else %do;
19186     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
19187     +         padjust = NONE
19188     +      %end;
19189     +  %end;
19191     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
19192     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
19193     +    Maxrules = &num_nrules
19194     +  %end;
19196     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
19197     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
19198     +    Maxsurrs = &num_nsurrs
19199     +  %end;
19201     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
19202     +     Missing=&EM_PROPERTY_MISSINGVALUE
19203     +  %end;
19205     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
19206     +     USEVARONCE
19207     +  %end;
19209     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
19210     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
19211     +  %end;
19214     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
19215     +    event = "&targetEvent"
19216     +  %end;
19218     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
19219     +     DECSEARCH
19220     +  %end;
19222     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
19223     +     PRIORSSEARCH
19224     +  %end;
19226     +  %if &arbor_1 ne %then %do;
19227     +    &arbor_1
19228     +  %end;
19230     +  %if &em_arbor ne %then %do;
19231     +     &em_arbor
19232     +  %end;
19233     +  ;
19234     + %end;
19235     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
19236     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
19237     +       interact;
19238     + %end;
19239     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
19240     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
19241     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
19242     +    %put &em_codebar;
19243     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
19244     +    %put &errormsg;
19245     +    %put &em_codebar;
19246     +    %goto doendm;
19247     +   %end;
19248     +   %else %do;
19249     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
19250     +       interact;
19251     +   %end;
19252     + %end;
19254     + %else %do;
19255     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
19256     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
19257     +    %put &em_codebar;
19258     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
19259     +    %put &errormsg;
19260     +    %put &em_codebar;
19261     +    %goto doendm;
19262     +   %end;
19263     +   %else %do;
19264     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
19265     +        interact;
19266     +   %end;
19267     + %end;
19269     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
19270     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
19271     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
19272     +    %end;
19274     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
19275     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
19276     +    %end;
19278     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
19279     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
19280     +    %end;
19282     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
19283     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
19284     +    %end;
19286     +    %if "%EM_FREQ" ne "" %then %do;
19287     +       freq %EM_FREQ;
19288     +    %end;
19290     +    %if "&multipleTar" eq "Y" %then %do;
19291     +       /* cycle through all target vars in variableset */
19292     +       %let tdsid = %sysfunc(open(temptarget));
19293     +       %if &tdsid %then %do;
19294     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
19295     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
19296     +          %do %while(^ %sysfunc(fetch(&tdsid)));
19297     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
19298     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
19299     +             target &var / level = &lvl
19300     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
19301     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
19302     +             %end;
19303     +             %else %if "&lvl" eq "INTERVAL" %then %do;
19304     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
19305     +             %end;
19306     +             %else %if "&lvl" eq "ORDINAL" %then %do;
19307     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
19308     +             %end;
19309     +          %end;
19310     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
19311     +       %end;
19312     +       useTarget variable = %EM_TARGET;
19313     +    %end;
19314     +    %else %do;
19315     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
19316     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
19317     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
19318     +      %end;
19319     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19320     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
19321     +      %end;
19322     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
19323     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
19324     +      %end;
19325     +    %end;
19327     +    %if "&multipleTar" eq "N" %then %do;
19328     +      &EM_DEC_STATEMENT;
19329     +    %end;
19331     +    Performance &EM_PROPERTY_PERFORMANCE
19332     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19333     +      nodesize=&EM_PROPERTY_NODESAMPLE
19334     +    %end;
19335     +    ;
19337     +    %if "&intFlag" eq "Y" %then %do;
19338     +       INTERACT Largest;
19339     +       Train maxnewdepth=0;
19340     +    %end;
19342     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
19343     +         Assess
19344     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19345     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
19346     +              %put &em_codebar;
19347     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
19348     +              %put &errormsg;
19349     +              %put &em_codebar;
19350     +            %end;
19351     +            %else %do;
19352     +               Validata=&EM_IMPORT_VALIDATE
19353     +            %end;
19354     +         %end;
19355     +         %else %do;
19356     +           NoValidata
19357     +         %end;
19358     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
19359     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
19360     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
19361     +               %if &dsid %then %do;
19362     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
19363     +                 %do %while(^ %sysfunc(fetch(&dsid)));
19364     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
19365     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
19366     +                   %else %do;
19367     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
19368     +                      %else %let measure= MISC;
19369     +                   %end;
19370     +                 %end;
19371     +               %end;
19372     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
19373     +            %end;
19374     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
19375     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
19376     +                 %let measure=ASE;
19377     +              %end;
19378     +              %else %do;
19379     +                 %let measure=MISC;
19380     +              %end;
19381     +            %end;
19382     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
19383     +              %let measure=ASE;
19384     +            %end;
19385     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
19386     +               %let measure = LIFT;
19387     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
19388     +               %if &dsid %then %do;
19389     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
19390     +                 %do %while(^ %sysfunc(fetch(&dsid)));
19391     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
19392     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
19393     +                 %end;
19394     +               %end;
19395     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
19396     +            %end;
19397     +            measure=&measure
19398     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
19399     +               event = "&targetEvent"
19400     +            %end;
19401     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
19402     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
19403     +            %end;
19404     +         %end;
19405     +         %if "&multipleTar" eq "N" %then %do;
19406     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
19407     +               CV
19408     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
19409     +                 CVNITer = &EM_PROPERTY_CVNITER
19410     +               %end;
19411     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
19412     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
19413     +               %end;
19414     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
19415     +                 CVSeed = &EM_PROPERTY_CVSEED
19416     +               %end;
19417     +            %end;
19418     +         %end;
19419     +       %end;
19420     +      ;
19422     +      %if "&intFlag" ne "Y" %then %do;
19423     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
19424     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
19425     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
19426     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
19428     +          SUBTREE &subtree
19429     +          %if "&subtree" eq "NLEAVES" %then %do;
19430     +            =&EM_PROPERTY_NSUBTREE
19431     +          %end;
19432     +          ;
19433     +        %end;
19435     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
19436     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
19437     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
19438     +          %end;
19439     +       %end;
19440     +      %end;
19441     + %end;
19444     + MakeMacro nleaves = nleaves;
19445     + save
19446     + %if "&EM_USER_EMTREE" ne "" %then %do;
19447     +   MODEL=&EM_USER_EMTREE
19448     + %end;
19449     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
19450     +   SEQUENCE=&EM_USER_OUTSEQ
19451     + %end;
19452     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
19453     +   IMPORTANCE=&EM_USER_OUTIMPORT
19454     + %end;
19455     + %if "&EM_USER_OUTNODES" ne "" %then %do;
19456     +   NODESTAT=&EM_USER_OUTNODES
19457     + %end;
19458     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
19459     +   SUMMARY=&EM_USER_OUTSUMMARY
19460     + %end;
19461     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
19462     +   STATSBYNODE=&EM_USER_OUTSTATS
19463     + %end;
19464     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
19465     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
19466     + %end;
19467     + %if "&EM_USER_OUTPATH" ne "" %then %do;
19468     +   Pathlistnonmissing=&EM_USER_OUTPATH
19469     + %end;
19470     + %if "&EM_USER_OUTRULES" ne "" %then %do;
19471     +   RULES = &EM_USER_OUTRULES
19472     + %end;
19473     + ;
19475     + %if "&intFlag" ne "Y" %then %do;
19477     +   %let lookupString = ;
19478     +   %if ^%symexist(EM_OPTION) %then
19479     +      %let EM_OPTION=;
19481     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
19482     +      %let lookupString = LOOKUP=SELECT;
19483     +   %end;
19485     +   %let codetext=;
19486     +   %let norescodetxt=;
19488     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
19489     +     %let codetext=&codetext DUMMY;
19490     +     %let norescodetxt=&norescodetxt DUMMY;
19491     +   %end;
19492     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
19493     +     %let codetext=&codetext NOLEAFID;
19494     +     %let norescodetxt=&norescodetxt NOLEAFID;
19495     +   %end;
19496     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
19497     +     %let norescodetxt=&norescodetxt NOPRED;
19498     +   %end;
19500     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
19501     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
19503     +   %if &nnpmml %then %do;
19504     +     code pmml;
19505     +   %end;
19507     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
19508     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
19509     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
19510     +   %end;
19511     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
19512     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
19513     +   %end;
19514     + %end;
19516     + run;
19517     + quit;
19519     + /*%em_checkerror(); */
19520     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
19521     +   /* Delete DMDB catalog */
19522     +   proc datasets lib=work nolist;
19523     +       delete _treeDMDB / mt=cat;
19524     +  run;
19525     +  %end;
19527     + %if &nnpmml %then %do;
19528     +    ods pmml close;
19529     + %end;
19531     +  %doendm:
19533     +%mend em_tree_runTreeProcedure;
19535     +%macro em_tree_createFitStats( multipleTar= );
19538     +  /* create targetTable is multipleTar eq Y */
19539     +  data temptarget;
19540     +    set &EM_DATA_VARIABLESET;
19541     +    where ROLE="TARGET";
19542     +  run;
19544     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
19545     +   data &EM_USER_EMOUTFIT;
19546     +     length target $32;
19547     +     merge work.fit_train
19548     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
19549     +       work.fit_valid
19550     +     %end;
19551     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
19552     +       work.fit_test
19553     +     %end;
19554     +     ;
19555     +     %if "&multipleTar" eq "N" %then %do;
19556     +       target="%EM_TARGET";
19557     +     %end;
19558     +     %else %do;
19559     +       target = _TARGET_;
19560     +     %end;
19561     +     drop _NW_ _SUMW_
19562     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
19563     +        _VSUMW_
19564     +     %end;
19565     +     ;
19566     +   run;
19568     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
19569     +     proc datasets library=work nolist;
19570     +       delete fit_valid;
19571     +     run;
19572     +   %end;
19573     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
19574     +     proc datasets library=work nolist;
19575     +       delete fit_test;
19576     +     run;
19577     +   %end;
19579     +%mend em_tree_createFitStats;
19582     +%macro em_tree_makeEnglishRules;
19584     +  %EM_GETNAME(key=OUTNODES, type=DATA);
19585     +  %EM_GETNAME(key=OUTPATH, type=DATA);
19587     +  /* verify that necessary tables exist and if not, skip processing */
19588     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
19589     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19590     +    %goto doendm;
19591     +  %end;
19592     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
19593     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19594     +    %goto doendm;
19595     +  %end;
19597     +  /* determine length of variable in outpath dataset */
19598     +  %let vlength= ;
19599     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
19600     +  %if &dsid ne %then %do;
19601     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
19602     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
19603     +  %end;
19604     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
19606     +  data tempoutpath;
19607     +    length varname $&vlength;
19608     +    retain varname;
19609     +    set &EM_USER_OUTPATH;
19611     +    if ^missing(variable) then varname=variable;
19612     +    else if ^missing(var_name) then varname=var_name;
19613     +    output;
19614     +  run;
19616     +  /* create an array of generated predicted variable names */
19617     +  %let tree_pred_vars = ;
19618     +  %let tree_pred_label = ;
19619     +  %let numpred= 0;
19620     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
19622     +    data _null_;
19623     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
19624     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
19625     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
19626     +     if eof then
19627     +       call symput('numpred', strip(put(_N_, BEST.)));
19628     +    run;
19629     +  %end;
19631     +  /* determine if NPRIORS exists in outnodes  */
19632     +  %local nprior_flag;
19633     +  data _null_;
19634     +    set &EM_USER_OUTNODES(obs=2) end=eof;
19635     +    if eof then do;
19636     +      call symput('nprior_flag', strip(put(npriors, best.)));
19637     +    end;
19638     +  run;
19640     +  proc sort data=tempoutpath; by node; run;
19641     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
19643     +  data tempoutpath;
19644     +    merge tempoutpath(in=_a) outnodes(keep= node
19645     +    %if "&nprior_flag" ne "." %then %do;
19646     +      NPRIORS
19647     +    %end;
19648     +    %else %do;
19649     +      N
19650     +    %end;
19651     +    %if &numpred gt 0 %then %do;
19652     +      %do i=1 %to &numpred;
19653     +        &&tree_pred_vars&i
19654     +      %end;
19655     +    %end;
19656     +    );
19657     +    by node;
19658     +    if _a;
19659     +  run;
19661     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
19663     +  data _null_;
19664     +    file x;
19665     +    set tempoutpath;
19666     +    by node descending varname;
19667     +    retain origvar oldnode string;
19668     +    length origvar $32 oldnode 8 string $200;
19670     +    if _N_ = 1 then do;
19671     +      origvar = varname;
19672     +      oldnode = node;
19673     +    end;
19675     +    if first.node then do;
19676     +       put "&EM_CODEBAR";
19677     +       put " Node = " node;
19678     +       put "&EM_CODEBAR";
19679     +    end;
19681     +      if first.varname then do;
19682     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
19683     +            if MISSING(CHARACTER_VALUE) then do;
19684     +             if NUMERIC_VALUE ne .  then do;
19685     +              if ^first.node then do;
19686     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
19687     +              end;
19688     +              else do;
19689     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
19690     +              end;
19691     +             end;
19692     +            end;
19693     +            else do;
19694     +              if ^first.node then do;
19695     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
19696     +              end;
19697     +              else do;
19698     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
19699     +              end;
19700     +             end;
19701     +         end;
19702     +         else if RELATION in ("=") then do;
19703     +            if ^first.node then do;
19704     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
19705     +            end;
19706     +            else do;
19707     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
19708     +            end;
19709     +         end;
19710     +         else if RELATION in ("ISMISSING") then do;
19711     +            if ^first.node then do;
19712     +              string = " AND "|| strip(varname) || " equals Missing";
19713     +            end;
19714     +            else do;
19715     +              string = "if "|| strip(varname) ||" equals Missing";
19716     +            end;
19717     +         end;
19718     +         else if RELATION in ("ISNOTMISSING") then do;
19719     +            if ^first.node then do;
19720     +              string = " AND "|| strip(varname) || " equals All Values";
19721     +            end;
19722     +            else do;
19723     +              string = "if "|| strip(varname) ||" equals All Values";
19724     +            end;
19725     +         end;
19726     +         if ^missing(varname) then origvar = varname;
19727     +         oldnode=node;
19729     +      end;
19730     +      else do;
19731     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
19732     +          if MISSING(CHARACTER_VALUE) then do;
19733     +           if  NUMERIC_VALUE ne .  then do;
19734     +            if ^MISSING(string) then
19735     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
19736     +            else
19737     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
19738     +           end;
19739     +          end;
19740     +          else do;
19741     +            if ^MISSING(string) then
19742     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
19743     +            else
19744     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
19745     +          end;
19747     +         end;
19748     +         else if RELATION in ("=") then do;
19749     +           string = strip(string)||", "||strip(character_value);
19750     +         end;
19751     +         else if RELATION in ("ISMISSING") then do;
19753     +         end;
19754     +         if ^missing(varname) then origvar = varname;
19755     +         oldnode=node;
19756     +      end;
19757     +      if last.varname then do;
19758     +         if RELATION in ("ISMISSING") then do;
19759     +           if ^first.varname then do;
19760     +             string = strip(string) || " or MISSING";
19761     +           end;
19762     +         end;
19763     +         put string;
19764     +         if ^missing(varname) then origvar = varname;
19765     +         oldnode=node;
19766     +      end;
19768     +      if last.node then do;
19769     +         put "then ";
19770     +         put " Tree Node Identifier   = " node;
19772     +         %if "&nprior_flag" ne "." %then %do;
19773     +           put " Number of Observations = " NPRIORS;
19774     +         %end;
19775     +         %else %do;
19776     +           put " Number of Observations = " N;
19777     +         %end;
19779     +         %if &numpred gt 0 %then %do;
19780     +           %do i=1 %to &numpred;
19781     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
19782     +           %end;
19783     +         %end;
19785     +         put " ";
19786     +         if ^missing(varname) then origvar = varname;
19787     +         oldnode=node;
19788     +      end;
19790     +  run;
19792     +  proc datasets lib=work nolist;
19793     +    delete tempoutpath outnodes;
19794     +  run;
19796     +  %doendm:
19797     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_TREND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: Records processed = 909   Memory used = 511K.
NOTE: There were 909 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.CLASSOUT has 3 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.27 seconds
      cpu time            0.07 seconds
      


NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.16 seconds
      cpu time            0.01 seconds
      

NOTE: 1646005 kilobytes of physical memory.
NOTE: Will use 909 out of 909 training cases.
NOTE: Using memory pool with 59965440 bytes.
NOTE: No new nodes created.
NOTE: The subtree sequence contains 1 subtrees. The largest has 1 nodes and 1 leaves.
NOTE: Using subtree with 1 nodes and 1 leaves.
NOTE: Created macro variable NLEAVES equal to 1.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 6 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 108 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 1 observations and 27 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 0 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 0 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 1 observations and 20 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 9 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 32 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 1 observations and 5 variables.


NOTE: There were 909 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK._NAMEDAT has 3 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.90 seconds
      cpu time            0.24 seconds
      


NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.13 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

NOTE: EXPLOREOBS EMWS1.Part_TRAIN : vars= 15 : recl= 128 : max=60000 : def= 6000

NOTE: There were 108 observations read from the data set EMWS1.TREE_EMTREE.
NOTE: The data set EMWS1.TREE_BROWSETREE has 108 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.04 seconds
      


